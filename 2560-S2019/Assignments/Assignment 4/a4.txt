Question 1:
The vale gets lower. The reason it gets lower is because each time a function is
 called, a return address and other information is stored, it is stored in
 memory staring a high memory and growing downwards, therefore decreasing the
 address value.

Question 2:
The address printed at the end is the same as the last printed address of the
address series printed at the beginning.

Question 3:
The address is some where in the middle. The segment of memory this variable
occupies is the "stack" segment.

Question 4:
When called recursively the address gets higher in memory. This is due to the
fact that it occupies the "initialized data" portion of the memory model which
does not follow the same decreasing pattern as the stack portion, and allocates
from low to high.

Question 5:
The Address some where in the middle of the previous addresses that are printed.
The reason this happens is because the char pointer is located in the "heap"
segment of the memory structure and is located between the "uninitialized data"
and "stack" segments, and is dynamically allocated.

Question 6:
When recursively called the address get higher. The reason this occurs is
because the "heap" segment of the memory model grows dynamically from lower to
higher memory.

Question 7:
Malloc allocated memory dynamically. It breaks down the types being stored into
alignments and locating addresses suitable for those alignments. This basically
means that all the parts of the array are broken up and spread over the heap.

Question 8:
The address of the global variable is a lot lower than the previous address.
This is due to the fact that the address is part of the "initialized data"
portion of the memory model which is relatively low in the model.

Question 9:
The address remains the same. The reason this happens is because the global
variable is placed in the "initialized data" portion of memory by the program
and does not change meaning the address remains the same for the duration of 
execution.
